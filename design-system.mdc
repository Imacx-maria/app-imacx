# IMACX Design System

**Version:** 3.0  
**Last Updated:** October 23, 2025  
**Status:** Active

⚠️ **CRITICAL PRINCIPLES v3.0:**
- ✅ **CSS VARIABLES ONLY** - Never hardcode colors
- ✅ **GLOBAL CSS RULES** - Avoid component-level specificity
- ✅ **THEME-AWARE** - All colors adapt to light/dark mode automatically
- ✅ **BUTTON BORDERS** - All buttons must have `border border-black` (1px, not 2px)
- ✅ **BUTTON ICONS** - Black on colored buttons, light on transparent buttons in dark mode
- ❌ **NEVER** use `bg-[#dedcd4]`, `text-black`, or any hardcoded hex colors
- ❌ **NEVER** add color classes to components - let global CSS handle it
- ❌ **NEVER** use `border-2` for buttons (use `border` for 1px)

---

## Table of Contents

1. [Overview](#overview)
2. [Core CSS Architecture](#core-css-architecture)
3. [Color System](#color-system)
4. [Typography](#typography)
5. [Components](#components)
6. [Dark Mode](#dark-mode)
7. [Implementation Guide](#implementation-guide)

---

## Overview

The IMACX Design System v3.0 is built on **global CSS rules** and **CSS variables**, eliminating specificity wars and ensuring consistent theming across light and dark modes.

### Core Principles

1. **Global CSS First**: All styling handled in `globals.css` using element selectors
2. **CSS Variables Only**: Single source of truth for all colors
3. **Zero Hardcoded Colors**: Theme-aware by default
4. **Minimal Specificity**: Components are markup-only, no inline color classes
5. **Sharp Corners**: `border-radius: 0 !important` everywhere
6. **No Focus Rings**: Clean, minimal outlines
7. **Button Standards**: All buttons have 1px borders, icons adapt to background (black on colored, light on transparent in dark mode)

### Architecture Philosophy

**The Problem We Solved:**
- ❌ Component-level color classes (`bg-[#dedcd4]`, `text-black`)
- ❌ High specificity battles (`!important` wars)
- ❌ Hardcoded colors that break in dark mode
- ❌ Inconsistent styling across similar elements

**The Solution:**
- ✅ Global CSS with element selectors (`input[type="text"]`, `button`, `th`)
- ✅ CSS variables for all colors (`var(--input)`, `var(--foreground)`)
- ✅ Automatic theme switching
- ✅ Single source of truth in `globals.css`

---

## Core CSS Architecture

### Global CSS Structure

All visual styling is controlled by `globals.css` using:
1. Element selectors (e.g., `input`, `button`, `th`)
2. Attribute selectors (e.g., `input[type="text"]`, `button[role="checkbox"]`)
3. Utility class overrides (e.g., `.hover\:bg-accent:hover`)
4. Theme overrides (`.dark` prefix for dark mode)

**Benefits:**
- Components are pure markup
- No color classes needed on elements
- Theme changes work instantly
- Consistent behavior everywhere

### CSS Variables

**All colors use CSS variables:**

```css
/* Light Mode */
:root {
  --background: oklch(0.94 0.01 95.04);     /* Light beige */
  --foreground: oklch(0% 0 0);              /* Black */
  --border: oklch(0% 0 0);                  /* Black */
  --input: oklch(0.45 0 0);                 /* Input background */
  --primary: oklch(84.08% 0.1725 84.2);     /* Yellow */
  --primary-foreground: oklch(0% 0 0);      /* Black */
  --accent: oklch(0.8947 0.0111 95.18);     /* Light beige */
  --accent-foreground: oklch(0% 0 0);       /* Black */
  --muted-foreground: oklch(0.5 0 0);       /* Medium gray */
  --ring: oklch(0% 0 0);                    /* Black */
}

/* Dark Mode */
.dark {
  --background: oklch(0.31 0 0);            /* Dark gray */
  --foreground: oklch(0.85 0 0);            /* Light gray (not white!) */
  --border: oklch(0.50 0 0);                /* Medium gray (visible!) */
  --input: oklch(0.45 0 0);                 /* Dark input */
  --primary: oklch(84.08% 0.1725 84.2);     /* Yellow (same) */
  --primary-foreground: oklch(0% 0 0);      /* Black (same) */
  --accent: oklch(0.40 0 0);                /* Dark gray (not light beige!) */
  --accent-foreground: oklch(0.85 0 0);     /* Light gray */
  --muted-foreground: oklch(0.65 0 0);      /* Lighter gray */
  --ring: oklch(0.85 0 0);                  /* Light gray (not white!) */
}
```

**Key Dark Mode Changes (v3.0):**
- **Border**: Changed from pure black (0%) to 50% gray (visible on dark backgrounds)
- **Foreground**: Changed from 92.49% to 85% (softer on eyes)
- **Accent**: Changed from light beige to 40% dark gray (proper hover contrast)
- **Accent Foreground**: Set to 85% (light text on dark hover)
- **Ring**: Changed from 100% white to 85% gray (softer)
- **Muted Foreground**: Optimized to 65% for readability

---

## Color System

### Theme-Aware Colors

**Never use hardcoded colors. Always use CSS variables:**

| Purpose | Light Mode | Dark Mode | Usage |
|---------|-----------|-----------|-------|
| Background | Light beige (94%) | Dark gray (31%) | `var(--background)` |
| Text | Black (0%) | Light gray (85%) | `var(--foreground)` |
| Border | Black (0%) | Medium gray (50%) | `var(--border)` |
| Input BG | Light gray (45%) | Dark gray (45%) | `var(--input)` |
| Primary | Yellow (84%) | Yellow (84%) | `var(--primary)` |
| Primary Text | Black (0%) | Black (0%) | `var(--primary-foreground)` |
| Accent | Light beige (89%) | Dark gray (40%) | `var(--accent)` |
| Accent Text | Black (0%) | Light gray (85%) | `var(--accent-foreground)` |
| Muted Text | Medium gray (50%) | Light gray (65%) | `var(--muted-foreground)` |

### Global CSS Rules

**All styling in `globals.css`:**

```css
/* ============================================
   INPUT FIELDS
   ============================================ */

input[type="text"],
input[type="number"],
input[type="email"],
input[type="password"],
input[type="search"],
input[type="url"],
input[type="tel"],
input[type="date"],
input:not([type]),
textarea {
  background-color: var(--input) !important;
  border: 1px solid var(--border) !important;
  color: var(--foreground) !important;
  outline: none !important;
  box-shadow: none !important;
}

/* Hover: background color (v3.0 - changed from transparent) */
input[type="text"]:hover,
input[type="number"]:hover,
/* ... other types ... */
textarea:hover {
  background-color: var(--background) !important;
  color: var(--foreground) !important;
}

/* ============================================
   CHECKBOXES (v3.0)
   ============================================ */

/* Light mode: Black outline for visibility */
button[role="checkbox"] {
  border-color: var(--foreground) !important;
}

button[role="checkbox"][data-state="checked"] {
  background-color: var(--primary) !important;
  border-color: var(--foreground) !important;
  color: var(--primary-foreground) !important;
}

/* Dark mode: Yellow outline */
.dark button[role="checkbox"] {
  border-color: var(--primary) !important;
}

.dark button[role="checkbox"][data-state="checked"] {
  background-color: var(--primary) !important;
  border-color: var(--primary) !important;
  color: var(--primary-foreground) !important;
}

/* ============================================
   TABLE HEADERS
   ============================================ */

th {
  background-color: var(--primary) !important;
  color: var(--primary-foreground) !important;
}

/* ============================================
   BUTTON ICONS - ADAPTIVE COLORS (v3.0)
   ============================================ */

/* Icons are black on colored backgrounds (both modes) */
button.bg-yellow-400 svg,
button.bg-primary svg,
button.bg-destructive svg,
button.bg-secondary svg {
  color: oklch(0% 0 0) !important;
  stroke: oklch(0% 0 0) !important;
}

/* Dark mode: icons on transparent/outline buttons are light (for visibility) */
.dark button:not(.bg-yellow-400):not(.bg-primary):not(.bg-destructive):not(.bg-secondary) svg {
  color: var(--foreground) !important;
  stroke: var(--foreground) !important;
}

/* ============================================
   YELLOW/BEIGE BACKGROUNDS = BLACK TEXT
   ============================================ */

.bg-primary,
.bg-primary *,
.hover\:bg-accent:hover,
.hover\:bg-accent:hover * {
  color: var(--primary-foreground) !important;
}

/* Exception: Buttons keep their own variant colors */
button.bg-primary,
button.bg-primary *,
.hover\:bg-accent:hover button.bg-primary,
.hover\:bg-accent:hover button.bg-primary * {
  color: var(--primary-foreground) !important;
}

button.bg-destructive,
button.bg-destructive *,
.hover\:bg-accent:hover button.bg-destructive,
.hover\:bg-accent:hover button.bg-destructive * {
  color: var(--destructive-foreground) !important;
}

button.bg-secondary,
button.bg-secondary *,
.hover\:bg-accent:hover button.bg-secondary,
.hover\:bg-accent:hover button.bg-secondary * {
  color: var(--secondary-foreground) !important;
}

/* ============================================
   DARK MODE OVERRIDES (v3.0)
   ============================================ */

/* Dark mode: accent hover (dark gray) needs light text */
.dark .hover\:bg-accent:hover,
.dark .hover\:bg-accent:hover * {
  color: var(--accent-foreground) !important;
}

/* Dark mode: yellow/primary still gets black text */
.dark .bg-primary,
.dark .bg-primary *,
.dark .hover\:bg-primary:hover,
.dark .hover\:bg-primary:hover * {
  color: var(--primary-foreground) !important;
}

/* Exception: Buttons keep their own variant colors in dark mode */
.dark button.bg-primary,
.dark button.bg-primary *,
.dark .hover\:bg-accent:hover button.bg-primary,
.dark .hover\:bg-accent:hover button.bg-primary * {
  color: var(--primary-foreground) !important;
}

.dark button.bg-destructive,
.dark button.bg-destructive *,
.dark .hover\:bg-accent:hover button.bg-destructive,
.dark .hover\:bg-accent:hover button.bg-destructive * {
  color: var(--destructive-foreground) !important;
}

/* Sidebar navigation */
.dark nav button:not(.bg-primary):not(:hover),
.dark nav button:not(.bg-primary):not(:hover) *,
.dark nav a:not(.bg-primary):not(:hover),
.dark nav a:not(.bg-primary):not(:hover) * {
  color: var(--muted-foreground) !important;
}

.dark nav button:hover,
.dark nav button:hover *,
.dark nav a:hover,
.dark nav a:hover * {
  color: var(--accent-foreground) !important;
}

.dark nav .bg-primary,
.dark nav .bg-primary * {
  color: var(--primary-foreground) !important;
}

.dark .border-t button.text-destructive,
.dark .border-t button.text-destructive * {
  color: var(--destructive) !important;
}

/* ============================================
   UNIVERSAL RULES
   ============================================ */

/* Font family - universal */
* {
  font-family: 'Atkinson Hyperlegible', sans-serif !important;
}

/* ALL TEXT UPPERCASE - UNIVERSAL RULE */
* {
  text-transform: uppercase !important;
}

/* EXCEPTION: Login page uses normal case */
[data-page="login"] *,
[data-page="login"] input,
[data-page="login"] button {
  text-transform: none !important;
}

/* NO BOLD TEXT - UNIVERSAL RULE */
* {
  font-weight: 400 !important;
}

/* No rounded corners anywhere */
* {
  border-radius: 0 !important;
}
```

---

## Typography

### Font Family

**Primary Font:** Atkinson Hyperlegible

```css
@import url('https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:wght@400;700&display=swap');

* {
  font-family: 'Atkinson Hyperlegible', sans-serif !important;
}
```

### Text Transform

**Global Uppercase Rule:**
```css
* {
  text-transform: uppercase !important;
}

/* Exception for login page */
[data-page="login"] * {
  text-transform: none !important;
}
```

### Font Weight

**No Bold Anywhere:**
```css
* {
  font-weight: 400 !important;
}
```

Visual hierarchy is achieved through:
- Font size (`text-2xl`, `text-xl`, `text-sm`)
- Color (`text-foreground`, `text-muted-foreground`)
- Uppercase transformation

---

## Components

### Inputs

**Zero component-level styling needed:**

```tsx
// ✅ CORRECT: Let global CSS handle everything
<Input placeholder="Código" />

// ❌ WRONG: Don't add color classes
<Input className="bg-[#dedcd4] text-black" placeholder="Código" />
```

**Global CSS handles:**
- Background color (theme-aware)
- Border color (theme-aware)
- Text color (theme-aware)
- Hover states
- Focus states (no outline)
- All input types automatically

### Buttons

**Use variant classes only:**

```tsx
// ✅ CORRECT: Variants are theme-aware
<Button variant="default">Primary</Button>      {/* Yellow with black text */}
<Button variant="destructive">Delete</Button>   {/* Red with black text */}
<Button variant="outline">Action</Button>       {/* Outlined */}

// ❌ WRONG: Don't add color classes
<Button className="bg-primary text-black">Primary</Button>
```

**Button colors preserved on hover:**
- Buttons maintain their variant colors even when parent row hovers
- Icons adapt automatically: black on colored buttons, light on transparent buttons in dark mode

**Yellow Action Buttons (Add, Clear, etc.):**

All yellow action buttons must have a 1px black border for visibility:

```tsx
// ✅ CORRECT: Yellow button with 1px border
<Button className="bg-yellow-400 hover:bg-yellow-500 border border-black text-black">
  <Plus className="h-4 w-4" />
  Adicionar Item
</Button>

// ✅ CORRECT: Yellow icon button with 1px border
<Button
  size="icon"
  className="bg-yellow-400 hover:bg-yellow-500 border border-black text-black"
>
  <XSquare className="h-4 w-4" />
</Button>

// ❌ WRONG: No border
<Button className="bg-yellow-400 hover:bg-yellow-500 text-black">
  Adicionar
</Button>

// ❌ WRONG: 2px border (too thick)
<Button className="bg-yellow-400 hover:bg-yellow-500 border-2 border-black text-black">
  Adicionar
</Button>
```

**Button Icon Colors (v3.0):**

Button icon colors adapt based on button background:

**Icons on Colored Backgrounds (Yellow, Primary, etc.):**
- **Always black** in both light and dark modes
- Enforced globally via CSS in `globals.css`

**Icons on Transparent/Outline/Ghost Buttons:**
- **Black** in light mode
- **Light** (var(--foreground)) in dark mode for visibility

```css
/* Icons are black on colored backgrounds */
button.bg-yellow-400 svg,
button.bg-primary svg {
  color: oklch(0% 0 0) !important;
  stroke: oklch(0% 0 0) !important;
}

/* Dark mode: icons on transparent buttons are light */
.dark button:not(.bg-yellow-400):not(.bg-primary):not(.bg-destructive):not(.bg-secondary) svg {
  color: var(--foreground) !important;
  stroke: var(--foreground) !important;
}
```

**Result:**
- No need to add icon color classes
- Icons are black on yellow/colored buttons (both modes)
- Icons are light on outline buttons in dark mode (for visibility)
- Automatic adaptation based on button type

### Checkboxes (v3.0)

**Automatic outline handling:**

Light Mode:
- Unchecked: Black outline (visible on light background)
- Checked: Yellow background + Black outline + Black checkmark

Dark Mode:
- Unchecked: Yellow outline (visible on dark background)
- Checked: Yellow background + Yellow outline + Black checkmark

```tsx
// ✅ CORRECT: No styling needed
<Checkbox />

// ❌ WRONG: Don't add outline classes
<Checkbox className="border-black" />
```

### Tables

**Headers automatically styled:**

```tsx
// ✅ CORRECT: Global CSS handles bg-primary and text-primary-foreground
<TableHead className="sticky top-0 z-10 border-b text-center uppercase">
  Column Name
</TableHead>

// ❌ WRONG: Don't hardcode colors
<TableHead className="bg-primary text-black">...</TableHead>
```

**Row hover states:**

```tsx
// ✅ CORRECT: Use utility class, global CSS handles colors
<TableRow className="hover:bg-accent transition-colors">
  ...
</TableRow>
```

In dark mode:
- Hover background: Dark gray (40%)
- Hover text: Light gray (85%)
- Buttons/icons: Maintain their colors

---

## Dark Mode

### Key Improvements (v3.0)

**1. Visible Borders**
- **Before:** Pure black (0%) - invisible on dark backgrounds
- **After:** Medium gray (50%) - visible on dark backgrounds

**2. Softer Text**
- **Before:** Near-white (92.49%) - harsh on eyes
- **After:** Light gray (85%) - easier to read

**3. Proper Hover Contrast**
- **Before:** Light beige (89%) - too light
- **After:** Dark gray (40%) - proper contrast with background (31%)

**4. Checkbox Outlines**
- **Light mode:** Black outlines (visible on light backgrounds)
- **Dark mode:** Yellow outlines (visible on dark backgrounds)

**5. Input Hover**
- **Before:** Transparent background (showed through parent colors)
- **After:** Background color (maintains theme consistency)

### Dark Mode Testing Checklist

When implementing new features, verify:

- [ ] Text is visible (not too light or too dark)
- [ ] Borders are visible (not pure black or pure white)
- [ ] Hover states have proper contrast
- [ ] Icons maintain their colors
- [ ] Checkboxes have visible outlines
- [ ] Inputs have proper backgrounds
- [ ] Table rows show hover feedback
- [ ] Yellow elements always have black text

---

## Implementation Guide

### Quick Reference

**Page Structure:**
```tsx
export default function Page() {
  return (
    <div className="w-full space-y-6">
      <h1 className="text-2xl font-bold text-foreground">Title</h1>
      <p className="text-muted-foreground mt-2">Subtitle</p>
      {/* Content */}
    </div>
  )
}
```

**Standard Heights:**
- Buttons & Inputs: `h-10` (40px)
- Icon buttons: `size="icon"` (40x40px)

**Standard Icon Sizes:**
- Button icons: `h-4 w-4`
- Dashboard icons: `h-6 w-6`

**Standard Spacing:**
- Sections: `space-y-6` (24px)
- Forms: `space-y-4` (16px)
- Card padding: `p-6` (24px)

### Component Checklist

When creating components:

- [ ] ✅ **NO** color classes (`bg-*`, `text-*` for colors)
- [ ] ✅ **NO** border-radius classes
- [ ] ✅ **NO** focus ring classes
- [ ] ✅ **YES** to utility classes (`h-10`, `space-y-4`, `p-6`)
- [ ] ✅ **YES** to variant props (`variant="default"`)
- [ ] ✅ **YES** to layout classes (`flex`, `grid`, `w-full`)
- [ ] ✅ Test in both light and dark mode

### Migration from v2.0

If updating from v2.0:

1. **Remove hardcoded colors:**
   ```tsx
   // Before (v2.0)
   <input className="bg-[#dedcd4] text-black" />
   
   // After (v3.0)
   <input />  {/* Global CSS handles it */}
   ```

2. **Remove color classes from buttons:**
   ```tsx
   // Before (v2.0)
   <button className="bg-primary text-primary-foreground">
   
   // After (v3.0)
   <Button variant="default">  {/* Variant handles colors */}
   ```

3. **Remove checkbox outline classes:**
   ```tsx
   // Before (v2.0)
   <Checkbox className="border-primary" />
   
   // After (v3.0)
   <Checkbox />  {/* Global CSS handles outlines */}
   ```

4. **Update CSS variables:**
   - Dark mode `--foreground`: 92.49% → 85%
   - Dark mode `--border`: 0% → 50%
   - Dark mode `--accent`: light beige → 40% gray
   - Dark mode `--accent-foreground`: black → 85% gray
   - Dark mode `--ring`: 100% → 85%
   - Dark mode `--muted-foreground`: 75% → 65%

### Testing

**Visual Testing:**
1. Toggle between light and dark mode
2. Verify all text is readable
3. Check all borders are visible
4. Test hover states on tables and buttons
5. Verify checkboxes have visible outlines
6. Test input fields (normal and hover states)

**Accessibility:**
- Color contrast ratios maintained
- Keyboard navigation works
- Hover states provide clear feedback
- No color-only indicators

---

## Version History

**v3.0 - October 23, 2025**
- **BREAKING CHANGE: Global CSS Architecture**
  - **Eliminated component-level color classes entirely**
  - All styling now in `globals.css` using element selectors
  - Components are pure markup (no color classes)
  - Zero specificity wars
- **Dark Mode Improvements:**
  - Border: 0% → 50% (visible on dark backgrounds)
  - Foreground: 92.49% → 85% (softer, easier on eyes)
  - Accent: light beige → 40% dark gray (proper contrast)
  - Accent foreground: black → 85% light gray
  - Ring: 100% → 85% (softer)
  - Muted foreground: 75% → 65% (optimized readability)
- **New Features:**
  - Checkbox outline rules (light mode: black, dark mode: yellow)
  - Input hover background (changed from transparent to var(--background))
  - Button color preservation on row hover
  - Proper dark mode text on hover states
  - **Button icon colors:** Icons are black on colored backgrounds; light on transparent/outline buttons in dark mode (enforced globally)
  - **Yellow action buttons:** Standardized with 1px black borders (not 2px)
- **Documentation:**
  - Complete rewrite focused on CSS-first architecture
  - Removed all component-level color examples
  - Added global CSS rule examples
  - Added migration guide from v2.0

**v2.0 - October 23, 2025**
- CSS variables only (removed hardcoded colors)
- Initial dark mode support
- Component-level color classes (deprecated in v3.0)

**v1.0 - October 22, 2025**
- Initial design system
- Hardcoded colors (deprecated)

---

## Philosophy

**v3.0 Design Philosophy:**

> "If you find yourself adding color classes to a component, you're doing it wrong. All colors should be handled by global CSS and CSS variables."

**The Goal:**
- Write components once, work in all themes
- Single source of truth for all styling
- No specificity battles
- Instant theme switching
- Maintainable, scalable codebase

**The Result:**
- Clean, readable components
- Consistent styling everywhere
- Dark mode that actually works
- Easy to update colors globally
- No more `!important` wars

---

**Remember:** CSS variables + global rules = theme magic ✨

---
