const { createClient } = require('@supabase/supabase-js')
const { Client } = require('pg')
require('dotenv').config({ path: '.env.local' })

async function setupAllPasswords() {
  let pgClient = null
  let supabaseClient = null

  try {
    console.log('üîß Configurando passwords para todos os utilizadores...\n')

    supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY,
    )

    pgClient = new Client({
      host: process.env.PG_HOST,
      port: process.env.PG_PORT,
      database: process.env.PG_DB,
      user: process.env.PG_USER,
      password: process.env.PG_PASSWORD,
      ssl: process.env.PG_SSLMODE === 'require' ? { rejectUnauthorized: false } : false,
    })
    await pgClient.connect()

    const { data: users } = await supabaseClient.auth.admin.listUsers()
    const authUsers = users?.users || []

    console.log(`üìã Encontrados ${authUsers.length} utilizadores\n`)

    // Generate passwords based on email
    const credentials = []

    for (const user of authUsers) {
      // Generate a simple temporary password (users should change it)
      // Format: FirstPart@Email123 (e.g., pookster@522123 for pookster522@gmail.com)
      const emailParts = user.email.split('@')
      const tempPassword = `${emailParts[0].substring(0, 8)}@${emailParts[0].substring(8, 15).toUpperCase()}123`

      console.log(`üîê ${user.email}`)
      console.log(`   Tentando definir password...`)

      try {
        const { error } = await supabaseClient.auth.admin.updateUserById(user.id, {
          password: tempPassword,
          email_confirm: true,
        })

        if (error) {
          console.log(`   ‚ùå Erro: ${error.message}`)
        } else {
          console.log(`   ‚úÖ Password definida`)
          credentials.push({
            email: user.email,
            password: tempPassword,
          })
        }
      } catch (err) {
        console.log(`   ‚ùå Exception: ${err.message}`)
      }

      console.log('')
    }

    console.log('\n' + '‚ïê'.repeat(70))
    console.log('‚úÖ CREDENCIAIS PARA LOGIN:\n')

    credentials.forEach((cred) => {
      console.log(`üìß ${cred.email}`)
      console.log(`üîê ${cred.password}`)
      console.log('')
    })

    console.log('‚ïê'.repeat(70))
    console.log('\n‚ö†Ô∏è  IMPORTANTE:')
    console.log('   - Estas s√£o passwords tempor√°rias')
    console.log('   - Os utilizadores devem mudar a password ap√≥s primeiro login')
    console.log('   - N√£o compartilhe estas passwords por email/chat inseguro')

    console.log('\nüí° Para usar no login:')
    console.log('   1. Abra http://localhost:3003/login')
    console.log('   2. Use um dos emails acima')
    console.log('   3. Use a password correspondente')

  } catch (error) {
    console.error('‚ùå Erro:', error.message)
  } finally {
    if (pgClient) await pgClient.end()
  }
}

setupAllPasswords()
